CRISP-DM - CRISP-DM stands for cross-industry process for data mining. The CRISP-DM methodology provides a structured approach to planning a data mining project. 

possible problems with the data:
	null fields / holes
	duplicate entries
	format errors ( date and times . etc )
	standard deviations, mode, mean, etc.
	
Prepare the Data / Data Cleaning:
	fill the null with the median of that column ( feature )
	get rid of that row - throw away data.
	duplication - keep one line only.
	format error - correct the format.

Fields - columns of the raw data
always get data with high granularity.

variables:
	continuous
		float
	discrete
		integer
		categorical
			integer
			string
			
	Terrabyte-size data needs Hadoop or Spark due to size

Modeling: 
	training phase --> prediction --> target col -> training accuracy A
	testing phase --> prediction --> target col -> training accuracy B
	
	training accuracy A and training accuracy B MUST be similar.
	training accuracy A and training accuracy B is NOT be similar = overfitting
	
Deployment;
	API
	Website
		Flask
		Django
		
Are there any distinct groups in our data? - identify cluster, identify outliers.
outliers are good because they ask more questions. in fraud detection, outliers are the fraudulent transactions.


Multi - objective optimization 
multinomial problem - target is 2 columns / field.
feature selection vs dimensionality reduction = 
	feature selection = given 100 columns, decide which one to keep and which one to delete.
	dimensionality reduction = take 100 columns and create 10 features (thru PCA). then use this 10 features to predict your model.

Tuples: An ordered sequence with a fixed number of elements; e.g., in x = (1, 2, 3), the parentheses makes it a tuple. x = ("Kirk", "Picard", "Spock") — once you've defined this, you can't change it.
Lists: An ordered sequence without a fixed number of elements, e.g., x = [1, 2, 3]. Note the square brackets. x = ["Lord", "of", "the", "Rings"] — this can be changed as you like.
Dictionaries: An unordered collection of key-value pairs, e.g., x = {'Mark': 'Twain', 'Apples': 5}. To retrieve each value (the part after each colon), use its key (the part before each colon). For example, x['Apples'] retrieves the value 5.